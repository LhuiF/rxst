<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
<log4j:configuration>
    <!-- ========================== 自定义输出格式说明================================
     %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
     %r 输出自应用启动到输出该log信息耗费的毫秒数
     %c 输出所属的类目，通常就是所在类的全名
     %t 输出产生该日志事件的线程名
     %m 输出代码中指定的信息，如log(message)中的message
     %n 输出一个回车换行符，Windows平台为“/r/n”，Unix平台为“/n”
     %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
     %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
    -->
    <!-- ==========================  输出方式说明================================
     Log4j提供的appender有以下几种:
         org.apache.log4j.ConsoleAppender(控制台),
         org.apache.log4j.FileAppender(文件),
         org.apache.log4j.DailyRollingFileAppender(每天产生一个日志文件),
         org.apache.log4j.RollingFileAppender(文件大小到达指定尺寸的时候产生一个新的文件),
         org.apache.log4j.WriterAppender(将日志信息以流格式发送到任意指定的地方)
    -->

    <!--输出到文件-->
    <appender name="allFileLog" class="org.apache.log4j.RollingFileAppender">
         <param name="File" value="ylbs-service.log"/>
         <param name="Append" value="true"/>
         <param name="MaxFileSize" value="1024KB"/>
         <param name="MaxBackupIndex" value="10"/>
         <layout class="org.apache.log4j.PatternLayout">
             <param name="ConversionPattern" value="[%p- %l ]%n\t%m%n"/>
         </layout>
     </appender>


    <!-- 输出到控制台 -->
    <appender name="console" class="org.apache.log4j.ConsoleAppender">
        <param name="Target" value="System.out"/>
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="[%p:%d %l]%n\t%m%n"/>
        </layout>
    </appender>



    <!-- 此处配置是为了让mybatis打印出执行的sql语句 -->
    <logger name="org.apache.ibatis" additivity="true">
        <level value="ERROR"/>
        <appender-ref ref="console"/>
    </logger>

    <logger name="com.mchange.v2" additivity="true">
        <level value="ERROR"/>
        <appender-ref ref="console"/>
    </logger>

    <logger name="org.quartz" additivity="true">
        <level value="ERROR"/>
        <appender-ref ref="console"/>
    </logger>

    <!--<loggerFactory class=""-->

   <!--
    Druid 可输出的日志
    log4j.logger.druid.sql=warn, stdout
    log4j.logger.druid.sql.DataSource=warn, stdout
    log4j.logger.druid.sql.Connection=warn, stdout
    log4j.logger.druid.sql.Statement=warn, stdout
    log4j.logger.druid.sql.ResultSet=warn, stdout
    -->

    <logger name="druid.sql" additivity="true">
        <level value="ERROR"/>
        <appender-ref ref="console"/>
    </logger>

    <root>
        <priority value="ERROR"/>
        <appender-ref ref="console"/>
    </root>
</log4j:configuration>